% AWS_batch_08_randon - Batch job to run build_and_fix_orbits at AWS on a user defined set of years/months - PCC 
% 
% Versions.
%   1.0.0 - 9/3/2024 - This is a cleanup run for 2002-2017, processing
%           orbits for a specified set of years/months. Currently designed
%           to run on x2idn.16xlarge. This computer has 64 virtural cores
%           and 1.9 TB of main memory, so Matlab will default to 32 jobs at
%           once and then start new ones as ones either finish or fail - PCC  

global version_struct

version_struct.AWS_batch_08_randon = '1.0.0';

% There is a test mode, which, if set to 1, allows you to run this script
% without submitting any jobs. It will however print out the range of dates
% to process. You should always run a test first and then remember to
% change test_run to 0 when you want this script to actually submit batch
% jobs. 

test_run = false; % Set to 1 to print out jobs to be sumitted. Set to 0 when ready to actually submit the jobs

submit_as_batch = true; % Set to 0 if job is to be submitted interactively.

% The next line needs to be replaced with the line after if an AWS spot instance.

Option = 8; % Reads data from s3 in us-west-2.

% Open the Matlab Project MODIS_L2.

machine = pwd;
if (~isempty(strfind(machine, 'ubuntu'))) & (~test_run)
    prj = openProject('/home/ubuntu/Documents/MODIS_L2/MODIS_L2.prj');
    fprintf('Opened /home/ubuntu/Documents/MODIS_L2/MODIS_L2.prj \n')
end

% Note that for the start time you MUST specify a month and day other than
% 0; i.e., [2002 7 1 0 0 0] will start at 00h00 on 1 July 2002. If you were
% to have entered [2002 7 0 0 0 0], the job would have started at 00h00 on
% 30 June 2002. 

job_start = [ ...
    2002,  7, 1, 0, 0, 0; ...
    2002,  8, 1, 0, 0, 0; ...
    2002,  9, 1, 0, 0, 0; ...
    2002, 10, 1, 0, 0, 0; ...
    2002, 11, 1, 0, 0, 0; ...
    2002, 12, 1, 0, 0, 0; ...
    2003,  1, 1, 0, 0, 0; ...
    2003,  3, 1, 0, 0, 0; ...
    2003, 10, 1, 0, 0, 0; ...
    2003, 11, 1, 0, 0, 0; ...
    2004,  2, 1, 0, 0, 0; ...
    2005,  3, 1, 0, 0, 0; ...
    2005,  4, 1, 0, 0, 0; ...
    2006,  6, 1, 0, 0, 0; ...
    2007,  1, 1, 0, 0, 0; ...
    2007,  2, 1, 0, 0, 0; ...
    2007,  5, 1, 0, 0, 0; ...
    2007,  6, 1, 0, 0, 0; ...
    2007, 12, 1, 0, 0, 0; ...
    2008,  2, 1, 0, 0, 0; ...
    2008,  4, 1, 0, 0, 0; ...
    2011, 11, 1, 0, 0, 0; ...
    2012,  1, 1, 0, 0, 0; ...
    2013,  3, 1, 0, 0, 0; ...
    2013,  4, 1, 0, 0, 0; ...
    2013,  6, 1, 0, 0, 0; ...
    2013,  7, 1, 0, 0, 0; ...
    2013,  8, 1, 0, 0, 0; ...
    2013,  9, 1, 0, 0, 0; ...
    2013, 11, 1, 0, 0, 0; ...
    2013, 12, 1, 0, 0, 0; ...
    2014,  4, 1, 0, 0, 0; ...
    2014,  9, 1, 0, 0, 0; ...
    2015,  8, 1, 0, 0, 0; ...
    2015, 11, 1, 0, 0, 0; ...
    2016,  9, 1, 0, 0, 0; ...
    2016, 11, 1, 0, 0, 0; ...
    2017,  1, 1, 0, 0, 0; ...
    2017,  2, 1, 0, 0, 0; ...
    2017,  3, 1, 0, 0, 0; ...
    2017,  4, 1, 0, 0, 0; ...
    2017,  5, 1, 0, 0, 0; ...
    2017,  6, 1, 0, 0, 0; ...
    2017,  7, 1, 0, 0, 0; ...
    2017,  8, 1, 0, 0, 0; ...
    2017,  9, 1, 0, 0, 0; ...
    2017, 10, 1, 0, 0, 0; ...
    2017, 11, 1, 0, 0, 0; ...
    2017, 12, 1, 0, 0, 0];

num_batch = size(job_start,1);

job_end = job_start;
for iJob=1:num_batch
    if job_start(iJob,2) == 12
        job_end(iJob,1) = job_start(iJob,1) + 1;
        job_end(iJob,2) = 1;
    else
        job_end(iJob,2) = job_start(iJob,2) + 1;        
    end

    job_end(iJob,4) = 4;
end


fprintf('The following jobs will be submitted: \n\n')

% Two variables that will rarely need to be changed. They will only be
% changed if you want to submit jobs using a different set of input data
% and/or if you want to run jobs interactively.

for iJob=1:num_batch
    base_diary_filename = strrep(strrep([datestr(now) '_Job_' num2str(iJob) '_From_' num2str(job_start(iJob,:)) '_To_' num2str(job_end(iJob,:))], ':', 'h'), ' ', '_');

    fprintf('Submitting job #%i to process from %s to %s. Diary file: %s\n', iJob, num2str(job_start(iJob,:)), num2str(job_end(iJob,:)), base_diary_filename)

    if ~test_run
        if submit_as_batch
            fprintf('Command for job #%i: %s\n', iJob, ['job_number(iJob) = batch( ''build_wrapper'', 0, {' num2str(Option) ', ' num2str(job_start(iJob,:)) ', ' num2str(job_end(iJob,:)) ', ' base_diary_filename '}, CaptureDiary=true);'])
            job_number(iJob) = batch( 'build_wrapper', 0, {8, (job_start(iJob,:)), (job_end(iJob,:)), base_diary_filename}, CaptureDiary=true);
        else
            build_wrapper( Option, (job_start(iJob,:)), (job_end(iJob,:)), base_diary_filename)
        end
    end
end

fprintf('\nTo get status of these jobs use ''job_number(iJob).xxx'', where iJob is one of the job numbers above\n and xxx is a particular characteristic of the job such as State or RunningDuration.\n')

% Wait until all jobs have completed and then exit Matlab

if ~test_run
    for iJob=1:num_batch
        job_number(iJob).wait();
    end

    exit
end
